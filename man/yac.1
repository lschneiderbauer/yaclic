.TH Yac 1 "Sep 2011"
.SH NAME
Yac \- Yet Another Calculator
.SH SYNOPSIS
.B yac
.RI [ options ]
.SH DESCRIPTION
This manual page documents the
.B yac
command.
.PP
\fBYac\fP is a simple and intuitive cli-calculator, where symbols can be as easily used as numbers.
Cause of writing such a calculator again is, that there exists just the "super-dumb-simple" ones and the "heavily-armed" ones (or at least I didn't find anything between).
.PP
So that's my solution (and there's work in progress).
It constists more or less of an extended ruby-shell.

.SH FEATURES
.TP
.B Basic arithmetical operations
For now \fBYac\fP supports just the basic arithmetical operations like +,-,*,/ and exponentials (**).
More is planned for the future.
.TP
.B Symbol usage
Ascii-Symbols can be used to represent a combination of operations with other symbols or numbers.
The syntax is as you would expect it (like writing a formula on the paper), but more to it in the \fBUSAGE\fP section.
Symbol-based simplifiing or equation-solving is not supported and most likely never will be.
.TP
.B Colored output
Just colored output to enhance the reader-eye's comfort.
.TP
.B Input history
The history works like the bash history.
Just use the arrow-keys.
For now the history session doesn't get restored on program starts, but that will possibly change in the future.

.SH USAGE
As already told, \fBYac\fP tries to be as intuitive as possible.
However, as always there are a few rules, you have to stick on to.

.SS '<<' instead of '='
Due to technical reasons, it is used '<<' instead of '=' as assignment operator.
Meaning, instead of 'a=b+d' it has to be written 'a<<b+d'; say 'a' holds the expression 'b+d'.
In some way, this nomenclature is even better, as it cannot mislead you to think of the character as a comparator.

.SS '.c' for real \fIc\fPalculation
Let's use the case from above: 'a<<b+d'.
If one of your next inputs is 'a', \fBYac\fP will tell you the expression 'a' is holding: '(b + d)'.
Of course, 'b' and 'd' could again hold other expressions or even real numbers.
If both are real numbers (e.g. b<<4, d<<3), you might eventually be interested in seeing, what the real solution is.
This can be accomplished with the '.c' suffix: 'a.c' gives '7'.
The example beneath reflects that.

.SS '.u' for \fIu\fPnfolding the expression
We continue our example and discuss the case, that 'b' holds another expression, let's say, '(e * f)'.
The symbol 'b' is linked to an expression held by 'a'.
If you look at 'a' and are interested in the resolved linkage tree, you can use 'a.u', which will give you '((e * f) + d)'.
Again the next example should make the difference clear.


.SS
example
(>> |' marks input, '<< |' marks output)
.P
$ yac
.P
>> |  a << b + e
.P
<< |  (b + e)
.P
>> |  e << d/2
.P
<< |  (d * 0.5)
.P
>> |  a.u
.P
<< |  (b + (d * 0.5))
.P
>> |  b << 3
.P
<< |  3
.P
>> |  d << 2.5
.P
<< |  2.5
.P
>> |  a.c
.P
<< |  4.25
.P
>> |  a
.P
<< |  (b + e)
.P
>> |  a.u
.P
<< |  (3 + (2.5 * 0.5))

.SH OPTIONS
Note that all command line options can also be used as builtin commands in the program's cli.
A summary of options is included below.
.TP
.B (\-\-)help
Show this man page
.TP
.B (\-\-)version
Print Yac version and release date
.TP
.B {expression}
An expression (without curly brackets) can directly be passed through to the calculators evaluator.
After evaluating, yac will terminate immediatly.

.SH BUGS
The program is in its very early stage.
Please file bugs at https://github.com/vootey/yac or send an email to the author (see \fBAUTHOR\fP).

.SH AUTHOR
Yac was written and is maintained by Lukas Schneiderbauer <lukas.schneiderbauer@gmail.com>.
