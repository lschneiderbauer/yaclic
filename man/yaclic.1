.TH Yaclic 1 "Sep 2011"
.SH NAME
Yaclic \- Yet Another Cli Calculator
.SH SYNOPSIS
.B yaclic
.RI [ options ]
.SH DESCRIPTION
You can either use the \fBYaclic\fP binary or - if you want to use this calculator in another program - the provided ruby API.
This manual page exclusivly documents the
.B yaclic
command.
.PP
\fBYaclic\fP is a simple and intuitive cli-calculator, where symbols can be as easily used as numbers.
Cause of writing such a calculator again is, that there exists just the "super-dumb-simple" ones and the "heavily-armed" ones (or at least I didn't find anything between).
.PP
So that's my solution (and there's work in progress).
It constists more or less of an extended ruby-shell.

.SH FEATURES
.TP
.B Basic  operations
\fBYaclic\fP supports the basic arithmetical operations like +,-,*,/ and exponential function (**) as well as the following functions:
sqrt, exp, log, log10, erf, erfc, sin, asin, sinh, asinh, cos, acos, cosh, acosh, tan, atan, tanh, atanh.
.TP
.B Symbol usage
Ascii-Symbols can be used to represent a combination of operations with other symbols or numbers.
The syntax is as you would expect it (like writing a formula on the paper), but more to it in the \fBUSAGE\fP section.
Symbol-based simplifiing or equation-solving is not supported and most likely never will be.
.TP
.B Expressions as functions
Expressions assigned to symbols can be used as function of another symbols.
For example, it's possible to iterate through a range of values and print the results in one step.
For detailed information see the []-operator.
.TP
.B Function plotting
Expressions as functions can easily be plotted as well.
The Gnuplot ruby bindings (and gnuplot of course) have to be installed, if you want this feature.
.TP
.B Support for common constants
You can use constants like PI or E as symbols.
You should refer to them as '_pi' and '_ee'.
.TP
.B Colored output
Just colored output to enhance the reader-eye's comfort.
If you just want the good old plain uncolored output, you can switch with the '$colored = false' command.
.TP
.B Input history
The history works like the bash history.
Just use the arrow-keys.
For now the history session doesn't get restored on program starts, but that will possibly change in the future.

.SH USAGE
As already told, \fBYaclic\fP tries to be as intuitive as possible.
However, as always there are a few rules, you have to stick on to.

.SS '<<' instead of '='
Due to technical reasons, it is used '<<' instead of '=' as assignment operator.
Meaning, instead of 'a=b+d' it has to be written 'a<<b+d'; say 'a' holds the expression 'b+d'.
In some way, this nomenclature is even better, as it cannot mislead you to think of the character as a comparator.

.SS '_'-prefix for word-symbols
If you want to use a whole word as symbol, you have to prefix it with the '_' character.
For example, the expression '_foo' would create a symbol '_foo', but 'foo' will create something like '(f * o) * o)'.

.SS '.c' for real \fIc\fPalculation
Let's use the case from above: 'a<<b+d'.
If one of your next inputs is 'a', \fBYaclic\fP will tell you the expression 'a' is holding: '(b + d)'.
Of course, 'b' and 'd' could again hold other expressions or even real numbers.
If both are real numbers (e.g. b<<4, d<<3), you might eventually be interested in seeing, what the real solution is.
This can be accomplished with the '.c' suffix: 'a.c' gives '7'.
The example beneath reflects that.

.SS '.u' for \fIu\fPnfolding the expression
We continue our example and discuss the case, that 'b' holds another expression, let's say, '(e * f)'.
The symbol 'b' is linked to an expression held by 'a'.
If you look at 'a' and are interested in the resolved linkage tree, you can use 'a.u', which will give you '((e * f) + d)'.
Again the next example should make the difference clear.

.SS '[]' for creating datasets
Let's define a symbol 'f << x**2 + b'.
We can now look at it from a more 'functional' perspective and say 'f' is a function dependend on 'x' with a constant 'b'.
If we want to print some values of 'f', we can write 'f[x,-5..5,1]'.
The first parameter defines the independent variable, the second the used range of values and the third the step-size (optional defaulting to 1).
The symbol 'b' is not mentioned at all, which means, it is constant.
If 'b' (or other constants) is (/are) undefined, it'll default to 1.
Output will be something like '26 17 10 5 2 1 2 5 10 17 26'.
Additionally you can plot your function in the defined range easily with e.g. 'f[x,-5..5].plot'.

.SH
EXAMPLE
(>> |' marks input, '<< |' marks output)
.P
$ yaclic
.P
>> |  a << b + e
.P
<< |  (b + e)
.P
>> |  e << d/2
.P
<< |  (d * 0.5)
.P
>> |  a.u
.P
<< |  (b + (d * 0.5))
.P
>> |  b << 3
.P
<< |  3
.P
>> |  d << 2.5
.P
<< |  2.5
.P
>> |  a.c
.P
<< |  4.25
.P
>> |  a
.P
<< |  (b + e)

.SH OPTIONS
Note that all command line options can also be used as builtin commands in the program's cli.
A summary of options is included below.
.TP
.B (\-\-)help
Show this man page
.TP
.B (\-\-)version
Print Yaclic version and release date
.TP
.B {expression}
An expression (without curly brackets) can directly be passed through to the calculators evaluator.
After evaluating, yaclic will terminate immediatly.

.SH BUGS
The program is in its very early stage.
Please file bugs at https://github.com/vootey/yaclic or send an email to the author (see \fBAUTHOR\fP).

.SH AUTHOR
Yaclic was written and is maintained by Lukas Schneiderbauer <lukas.schneiderbauer@gmail.com>.
